name: "Plan New Feature"

on:
  workflow_dispatch:
    inputs:
      feature_request:
        description: 'High-level description of the new feature'
        required: true

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Generate plan
        id: plan
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pip install requests
          python scripts/plan_feature.py \
            --request "${{ github.event.inputs.feature_request }}" \
            --output "feature-plan.md"

      - name: Create new branch and commit plan
        run: |
          set -euo pipefail
          # Build a safe branch name with the required prefix 'feature/plan-'
          PREFIX="feature/plan"
          RAW_INPUT="${{ github.event.inputs.feature_request }}"
          # Slugify the request: lowercase, replace non a-z0-9 with '-', trim, and limit length
          SLUG="$(echo "$RAW_INPUT" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | cut -c 1-40)"
          # Fallback slug if empty after sanitization
          if [ -z "$SLUG" ]; then SLUG="plan"; fi
          BRANCH_NAME="${PREFIX}-${SLUG}"

          echo "Computed branch: $BRANCH_NAME"
          # Guardrail: ensure the computed branch matches the expected pattern
          if ! echo "$BRANCH_NAME" | grep -Eq '^feature/plan-[a-z0-9]+(-[a-z0-9]+)*$'; then
            echo "Branch name failed validation: $BRANCH_NAME" >&2
            exit 1
          fi

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git checkout -b "$BRANCH_NAME"
          git add feature-plan.md
          git commit -m "feat: add AI-generated plan for '${{ github.event.inputs.feature_request }}'"
          git push origin "$BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
